// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "qnvfiletransfer.h"

/////////////////////////////////////////////////////////////////////////////
// Cqnvfiletransfer

IMPLEMENT_DYNCREATE(Cqnvfiletransfer, CWnd)

/////////////////////////////////////////////////////////////////////////////
// Cqnvfiletransfer properties

/////////////////////////////////////////////////////////////////////////////
// Cqnvfiletransfer operations

void Cqnvfiletransfer::GetVer(BSTR* strVer)
{
	static BYTE parms[] =
		VTS_PBSTR;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 strVer);
}

void Cqnvfiletransfer::FT_ReleaseSource(long bSelt)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bSelt);
}

long Cqnvfiletransfer::FT_StopFileTrans(unsigned long dwType)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		dwType);
	return result;
}

long Cqnvfiletransfer::FT_GetHandle()
{
	long result;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long Cqnvfiletransfer::FT_GetSID()
{
	long result;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long Cqnvfiletransfer::FT_RecvRequest(LPCTSTR lpVID, LPCTSTR lpFileName, unsigned long dwFileLen, unsigned long dwVerType, unsigned long dwFileType, unsigned long dwHandle)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lpVID, lpFileName, dwFileLen, dwVerType, dwFileType, dwHandle);
	return result;
}

long Cqnvfiletransfer::FT_ReplyRecvFileRequest(unsigned long dwsid, LPCTSTR lpFileName, unsigned long dwFileLen, long bOverWrite)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_I4 VTS_I4;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		dwsid, lpFileName, dwFileLen, bOverWrite);
	return result;
}

long Cqnvfiletransfer::FT_GetRequestType()
{
	long result;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

CString Cqnvfiletransfer::FT_GetFilePath()
{
	CString result;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

long Cqnvfiletransfer::FT_SendRequest(LPCTSTR lpVID, LPCTSTR lpFilePath, unsigned long dwVerType, unsigned long dwFileType)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_I4 VTS_I4;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lpVID, lpFilePath,dwVerType, dwFileType);
	return result;
}

long Cqnvfiletransfer::FT_GetTransFileType()
{
	long result;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long Cqnvfiletransfer::FT_SetBmp2JpgQuality(unsigned long dwQuality)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		dwQuality);
	return result;
}

long Cqnvfiletransfer::FT_GetFileSize()
{
	long result;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long Cqnvfiletransfer::FT_SetLanguage(unsigned short wLanguage)
{
	long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		wLanguage);
	return result;
}

long Cqnvfiletransfer::FT_GetTransStatus()
{
	long result;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}
